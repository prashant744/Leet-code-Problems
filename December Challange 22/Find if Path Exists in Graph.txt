class Solution {
public:
    unordered_map<int , vector<int>>mp;
    bool flag=false;
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        if(source==destination)return true;
        vector<int>visit(n,0);
        for(auto e:edges){
            mp[e[0]].push_back(e[1]);
            mp[e[1]].push_back(e[0]);
        }
        return bfs(source,destination,visit);
    }

    bool bfs(int source,int destination,vector<int>&visit){
        visit[source]=1;
        if(find(mp[source].begin(),mp[source].end(),destination) != mp[source].end()){
            flag=true;
        }
        for(int m:mp[source]){
            if(!flag&&visit[m]==0)bfs(m,destination,visit);
        }
        return flag;
    }
};