class Solution {
public:

    int dfs(vector<vector<int>>& grid,int sum,int row,int col){
        if(row<0||row>grid.size()-1||col<0||col>grid[0].size()-1||grid[row][col]==-1||grid[row][col]==1){
            return 0;
        }
        if(grid[row][col]==2)return sum==1?1:0;
        grid[row][col]=1;
        int up=dfs(grid,sum-1,row-1,col);
        int down=dfs(grid,sum-1,row+1,col);
        int left=dfs(grid,sum-1,row,col-1);
        int right=dfs(grid,sum-1,row,col+1);
        grid[row][col]=0;
        return up+down+left+right;
    }

    int uniquePathsIII(vector<vector<int>>& grid) {
        if(grid.size()<1 || grid[0].size()<1)return 0;
        int r1,c1,sum=grid.size()*grid[0].size();

        for(int i=0;i<grid.size();i++){
            for(int j=0;j<grid[0].size();j++){
                if(grid[i][j]==-1){
                    sum--;
                }
                if(grid[i][j]==1){
                    r1=i,c1=j;
                    grid[i][j]=0;
                }
            }
        }
        return dfs(grid,sum,r1,c1);
    }
};