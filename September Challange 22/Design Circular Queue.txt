class MyCircularQueue {
 private:
        int *val;
        int currentIndex;
        int nextIndex;
        int capacity;
        int size;
    
public:
    MyCircularQueue(int k) {
        val = new int[k];
        currentIndex=-1;
        nextIndex=0;
        capacity=k;
        size=0;
        
    }
    
    bool enQueue(int value) {
        if(size==capacity){
            return false;
        }
        if(currentIndex==-1){
            currentIndex=0;
        }
        val[nextIndex]=value;
        nextIndex=(nextIndex+1)%capacity;
        size++;
        return true;
    }
    
    bool deQueue() {
        if(isEmpty()){
            return false;
        }
        currentIndex=(currentIndex+1)%capacity;
        size--;
        if(size==0){
            currentIndex=-1;
            nextIndex=0;
        }
        return true;
        
    }
    
    int Front() {
        if(isEmpty()){
            return -1;
        }
        return val[currentIndex];
    }
    
    int Rear() {
        if(isEmpty()){
            return -1;
        }
        return val[(nextIndex+capacity-1)%capacity];
    }
    
    bool isEmpty() {
        return size==0;
    }
    
    bool isFull() {
        return size==capacity;
    }
};

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue* obj = new MyCircularQueue(k);
 * bool param_1 = obj->enQueue(value);
 * bool param_2 = obj->deQueue();
 * int param_3 = obj->Front();
 * int param_4 = obj->Rear();
 * bool param_5 = obj->isEmpty();
 * bool param_6 = obj->isFull();
 */